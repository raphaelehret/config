#!/usr/bin/env python3

### Author : Raphael EHRET
### Name : sf (size files/folders)
### Mail : ehretrapha[at]eisti[dot]eu
### Langage : python 3
### Type : script
### 
### Description : prints the summed size of the content of each folder located
###                 on the root of the current directory. By default, the results
###                 are sorted by ascending order on the name. For other sort options,
###                 see the [Arguments] part.  
### 
### Required :
### * hurry.filesize python library 
### 
### Arguments :
###     [-f] : also prints the size of the files at the root of the path
###     [-H] : also prints the size of hidden folders (and file if you actived -f)
###     [-s] : sorts the results by ascending order on the size
###     [-S] : sorts the results by descending order on the size

import os
import sys
import humanize

def inargs(argument,argsin):
    minus = [s[1:] for s in argsin if (s[0]=='-' and s[1] != 'p')]
    isin = False
    for s in minus:
        if argument in s:
            isin = True
            break
    return isin

def getpath(argsin):
    path = './'
    for s in argsin:
        if len(s) > 6:
            if s[0:6] == '-path=':
                path = s[6:]
                break
    return path

def getfoldersize(beginPath,isverbose):
    hasBeenBlocked = False
    totalSize = 0
    for dirpath, directories, files in os.walk(beginPath):
        if isverbose:
            print('Going through '+dirpath)
        for f in files:
            filepath = os.path.join(dirpath,f)
            try:
                totalSize += os.path.getsize(filepath)
            except:
                hasBeenBlocked = True
                continue
    if hasBeenBlocked:
        print("This result may not be relevant as some protected or unparsable files and/or directories were encountered")
    return totalSize

argsin = sys.argv
path = getpath(argsin)
try:
    os.chdir(path)
except:
    print('Your path is invalid')
    exit(1)

files = os.listdir('./')
sizes = []

if inargs('s',argsin) and inargs('S',argsin):
    print("You can't sort both asc and desc")
    exit(1)

for f in files:
    if ((f[0] != '.') or (inargs('H',argsin))):
        if (os.path.isdir(f)):
            sizes.append((f+'/',getfoldersize(f,inargs('v',argsin))))
        elif (inargs('f',argsin)):
            sizes.append((f,os.path.getsize(f)))

if not(sizes):
    if inargs('f',argsin):
        print('This folder is empty...')
        exit(0)
    print('There is no folder there...')
    exit(0)

if inargs('s',argsin):
    sizes = sorted(sizes,key=lambda tup:tup[1],reverse=True)
elif inargs('S',argsin):
    sizes = sorted(sizes,key=lambda tup:tup[1],reverse=False)

maxlength = len(sorted(sizes,key=lambda tup:len(tup[0]))[-1][0])

if inargs('f',argsin):
    print('\n'+str(len(sizes))+' folder(s) and file(s) for a total size of '+str(humanize.naturalsize(sum([s for _,s in sizes])))+'\n')
else:
    print('\n'+str(len(sizes))+' folder(s) for a total size of '+str(humanize.naturalsize(sum([s for _,s in sizes])))+'\n')


for f, s in sizes:
    print(f+(' '*(maxlength-len(f)+2))+' => '+humanize.naturalsize(s))
